/**
 * Copyright (c) 2016, 2022, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */
package com.oracle.bmc.vulnerabilityscanning.model;

/**
 * A vulnerability found in one or more host scans in a compartment
 * <br/>
 * Note: Objects should always be created or deserialized using the {@link Builder}. This model distinguishes fields
 * that are {@code null} because they are unset from fields that are explicitly set to {@code null}. This is done in
 * the setter methods of the {@link Builder}, which maintain a set of all explicitly set fields called
 * {@link #__explicitlySet__}. The {@link #hashCode()} and {@link #equals(Object)} methods are implemented to take
 * {@link #__explicitlySet__} into account. The constructor, on the other hand, does not set {@link #__explicitlySet__}
 * (since the constructor cannot distinguish explicit {@code null} from unset {@code null}).
 **/
@javax.annotation.Generated(value = "OracleSDKGenerator", comments = "API Version: 20210215")
@com.fasterxml.jackson.databind.annotation.JsonDeserialize(
    builder = HostVulnerability.Builder.class
)
@com.fasterxml.jackson.annotation.JsonFilter(com.oracle.bmc.http.internal.ExplicitlySetFilter.NAME)
public final class HostVulnerability {
    @Deprecated
    @java.beans.ConstructorProperties({
        "id",
        "compartmentId",
        "authentication",
        "cveReference",
        "cveDetails",
        "severity",
        "state",
        "name",
        "timeLastDetected",
        "timeFirstDetected",
        "hostCount",
        "vulnerabilityType",
        "lifecycleState"
    })
    public HostVulnerability(
            String id,
            String compartmentId,
            String authentication,
            String cveReference,
            CveDetails cveDetails,
            ScanResultProblemSeverity severity,
            ScanResultVulnerabilityState state,
            String name,
            java.util.Date timeLastDetected,
            java.util.Date timeFirstDetected,
            Integer hostCount,
            VulnerabilityType vulnerabilityType,
            LifecycleState lifecycleState) {
        super();
        this.id = id;
        this.compartmentId = compartmentId;
        this.authentication = authentication;
        this.cveReference = cveReference;
        this.cveDetails = cveDetails;
        this.severity = severity;
        this.state = state;
        this.name = name;
        this.timeLastDetected = timeLastDetected;
        this.timeFirstDetected = timeFirstDetected;
        this.hostCount = hostCount;
        this.vulnerabilityType = vulnerabilityType;
        this.lifecycleState = lifecycleState;
    }

    @com.fasterxml.jackson.databind.annotation.JsonPOJOBuilder(withPrefix = "")
    public static class Builder {
        @com.fasterxml.jackson.annotation.JsonProperty("id")
        private String id;

        public Builder id(String id) {
            this.id = id;
            this.__explicitlySet__.add("id");
            return this;
        }

        @com.fasterxml.jackson.annotation.JsonProperty("compartmentId")
        private String compartmentId;

        public Builder compartmentId(String compartmentId) {
            this.compartmentId = compartmentId;
            this.__explicitlySet__.add("compartmentId");
            return this;
        }

        @com.fasterxml.jackson.annotation.JsonProperty("authentication")
        private String authentication;

        public Builder authentication(String authentication) {
            this.authentication = authentication;
            this.__explicitlySet__.add("authentication");
            return this;
        }

        @com.fasterxml.jackson.annotation.JsonProperty("cveReference")
        private String cveReference;

        public Builder cveReference(String cveReference) {
            this.cveReference = cveReference;
            this.__explicitlySet__.add("cveReference");
            return this;
        }

        @com.fasterxml.jackson.annotation.JsonProperty("cveDetails")
        private CveDetails cveDetails;

        public Builder cveDetails(CveDetails cveDetails) {
            this.cveDetails = cveDetails;
            this.__explicitlySet__.add("cveDetails");
            return this;
        }

        @com.fasterxml.jackson.annotation.JsonProperty("severity")
        private ScanResultProblemSeverity severity;

        public Builder severity(ScanResultProblemSeverity severity) {
            this.severity = severity;
            this.__explicitlySet__.add("severity");
            return this;
        }

        @com.fasterxml.jackson.annotation.JsonProperty("state")
        private ScanResultVulnerabilityState state;

        public Builder state(ScanResultVulnerabilityState state) {
            this.state = state;
            this.__explicitlySet__.add("state");
            return this;
        }

        @com.fasterxml.jackson.annotation.JsonProperty("name")
        private String name;

        public Builder name(String name) {
            this.name = name;
            this.__explicitlySet__.add("name");
            return this;
        }

        @com.fasterxml.jackson.annotation.JsonProperty("timeLastDetected")
        private java.util.Date timeLastDetected;

        public Builder timeLastDetected(java.util.Date timeLastDetected) {
            this.timeLastDetected = timeLastDetected;
            this.__explicitlySet__.add("timeLastDetected");
            return this;
        }

        @com.fasterxml.jackson.annotation.JsonProperty("timeFirstDetected")
        private java.util.Date timeFirstDetected;

        public Builder timeFirstDetected(java.util.Date timeFirstDetected) {
            this.timeFirstDetected = timeFirstDetected;
            this.__explicitlySet__.add("timeFirstDetected");
            return this;
        }

        @com.fasterxml.jackson.annotation.JsonProperty("hostCount")
        private Integer hostCount;

        public Builder hostCount(Integer hostCount) {
            this.hostCount = hostCount;
            this.__explicitlySet__.add("hostCount");
            return this;
        }

        @com.fasterxml.jackson.annotation.JsonProperty("vulnerabilityType")
        private VulnerabilityType vulnerabilityType;

        public Builder vulnerabilityType(VulnerabilityType vulnerabilityType) {
            this.vulnerabilityType = vulnerabilityType;
            this.__explicitlySet__.add("vulnerabilityType");
            return this;
        }

        @com.fasterxml.jackson.annotation.JsonProperty("lifecycleState")
        private LifecycleState lifecycleState;

        public Builder lifecycleState(LifecycleState lifecycleState) {
            this.lifecycleState = lifecycleState;
            this.__explicitlySet__.add("lifecycleState");
            return this;
        }

        @com.fasterxml.jackson.annotation.JsonIgnore
        private final java.util.Set<String> __explicitlySet__ = new java.util.HashSet<String>();

        public HostVulnerability build() {
            HostVulnerability __instance__ =
                    new HostVulnerability(
                            id,
                            compartmentId,
                            authentication,
                            cveReference,
                            cveDetails,
                            severity,
                            state,
                            name,
                            timeLastDetected,
                            timeFirstDetected,
                            hostCount,
                            vulnerabilityType,
                            lifecycleState);
            __instance__.__explicitlySet__.addAll(__explicitlySet__);
            return __instance__;
        }

        @com.fasterxml.jackson.annotation.JsonIgnore
        public Builder copy(HostVulnerability o) {
            Builder copiedBuilder =
                    id(o.getId())
                            .compartmentId(o.getCompartmentId())
                            .authentication(o.getAuthentication())
                            .cveReference(o.getCveReference())
                            .cveDetails(o.getCveDetails())
                            .severity(o.getSeverity())
                            .state(o.getState())
                            .name(o.getName())
                            .timeLastDetected(o.getTimeLastDetected())
                            .timeFirstDetected(o.getTimeFirstDetected())
                            .hostCount(o.getHostCount())
                            .vulnerabilityType(o.getVulnerabilityType())
                            .lifecycleState(o.getLifecycleState());

            copiedBuilder.__explicitlySet__.retainAll(o.__explicitlySet__);
            return copiedBuilder;
        }
    }

    /**
     * Create a new builder.
     */
    public static Builder builder() {
        return new Builder();
    }

    public Builder toBuilder() {
        return new Builder().copy(this);
    }

    /**
     * ID of the vulnerability
     **/
    @com.fasterxml.jackson.annotation.JsonProperty("id")
    private final String id;

    public String getId() {
        return id;
    }

    /**
     * Compartment ID of the vulnerability. Vulnerabilities with identical CVEs can exist in different compartments, based on scan target location
     **/
    @com.fasterxml.jackson.annotation.JsonProperty("compartmentId")
    private final String compartmentId;

    public String getCompartmentId() {
        return compartmentId;
    }

    /**
     * Mechanism used for scan authentication
     **/
    @com.fasterxml.jackson.annotation.JsonProperty("authentication")
    private final String authentication;

    public String getAuthentication() {
        return authentication;
    }

    /**
     * Reference to MITRE CVE ID
     **/
    @com.fasterxml.jackson.annotation.JsonProperty("cveReference")
    private final String cveReference;

    public String getCveReference() {
        return cveReference;
    }

    @com.fasterxml.jackson.annotation.JsonProperty("cveDetails")
    private final CveDetails cveDetails;

    public CveDetails getCveDetails() {
        return cveDetails;
    }

    /**
     * Severity of the vulnerability
     **/
    @com.fasterxml.jackson.annotation.JsonProperty("severity")
    private final ScanResultProblemSeverity severity;

    public ScanResultProblemSeverity getSeverity() {
        return severity;
    }

    /**
     * State of the vulnerability
     **/
    @com.fasterxml.jackson.annotation.JsonProperty("state")
    private final ScanResultVulnerabilityState state;

    public ScanResultVulnerabilityState getState() {
        return state;
    }

    /**
     * Vulnerability name
     **/
    @com.fasterxml.jackson.annotation.JsonProperty("name")
    private final String name;

    public String getName() {
        return name;
    }

    /**
     * Date of scan result that most recently reported the vulnerability
     **/
    @com.fasterxml.jackson.annotation.JsonProperty("timeLastDetected")
    private final java.util.Date timeLastDetected;

    public java.util.Date getTimeLastDetected() {
        return timeLastDetected;
    }

    /**
     * Date of scan result that first reported the vulnerability
     **/
    @com.fasterxml.jackson.annotation.JsonProperty("timeFirstDetected")
    private final java.util.Date timeFirstDetected;

    public java.util.Date getTimeFirstDetected() {
        return timeFirstDetected;
    }

    /**
     * Number of scanned hosts in this compartment whose scan results currently report this vulnerability
     **/
    @com.fasterxml.jackson.annotation.JsonProperty("hostCount")
    private final Integer hostCount;

    public Integer getHostCount() {
        return hostCount;
    }

    /**
     * Specifies the type of Vulnerability
     **/
    @com.fasterxml.jackson.annotation.JsonProperty("vulnerabilityType")
    private final VulnerabilityType vulnerabilityType;

    public VulnerabilityType getVulnerabilityType() {
        return vulnerabilityType;
    }

    /**
     * The current state of the resource.
     **/
    @com.fasterxml.jackson.annotation.JsonProperty("lifecycleState")
    private final LifecycleState lifecycleState;

    public LifecycleState getLifecycleState() {
        return lifecycleState;
    }

    @Override
    public String toString() {
        java.lang.StringBuilder sb = new java.lang.StringBuilder();
        sb.append("HostVulnerability(");
        sb.append("id=").append(String.valueOf(this.id));
        sb.append(", compartmentId=").append(String.valueOf(this.compartmentId));
        sb.append(", authentication=").append(String.valueOf(this.authentication));
        sb.append(", cveReference=").append(String.valueOf(this.cveReference));
        sb.append(", cveDetails=").append(String.valueOf(this.cveDetails));
        sb.append(", severity=").append(String.valueOf(this.severity));
        sb.append(", state=").append(String.valueOf(this.state));
        sb.append(", name=").append(String.valueOf(this.name));
        sb.append(", timeLastDetected=").append(String.valueOf(this.timeLastDetected));
        sb.append(", timeFirstDetected=").append(String.valueOf(this.timeFirstDetected));
        sb.append(", hostCount=").append(String.valueOf(this.hostCount));
        sb.append(", vulnerabilityType=").append(String.valueOf(this.vulnerabilityType));
        sb.append(", lifecycleState=").append(String.valueOf(this.lifecycleState));
        sb.append("__explicitlySet__=").append(String.valueOf(this.__explicitlySet__));
        sb.append(")");
        return sb.toString();
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (!(o instanceof HostVulnerability)) {
            return false;
        }

        HostVulnerability other = (HostVulnerability) o;
        return java.util.Objects.equals(this.id, other.id)
                && java.util.Objects.equals(this.compartmentId, other.compartmentId)
                && java.util.Objects.equals(this.authentication, other.authentication)
                && java.util.Objects.equals(this.cveReference, other.cveReference)
                && java.util.Objects.equals(this.cveDetails, other.cveDetails)
                && java.util.Objects.equals(this.severity, other.severity)
                && java.util.Objects.equals(this.state, other.state)
                && java.util.Objects.equals(this.name, other.name)
                && java.util.Objects.equals(this.timeLastDetected, other.timeLastDetected)
                && java.util.Objects.equals(this.timeFirstDetected, other.timeFirstDetected)
                && java.util.Objects.equals(this.hostCount, other.hostCount)
                && java.util.Objects.equals(this.vulnerabilityType, other.vulnerabilityType)
                && java.util.Objects.equals(this.lifecycleState, other.lifecycleState)
                && java.util.Objects.equals(this.__explicitlySet__, other.__explicitlySet__);
    }

    @Override
    public int hashCode() {
        final int PRIME = 59;
        int result = 1;
        result = (result * PRIME) + (this.id == null ? 43 : this.id.hashCode());
        result =
                (result * PRIME)
                        + (this.compartmentId == null ? 43 : this.compartmentId.hashCode());
        result =
                (result * PRIME)
                        + (this.authentication == null ? 43 : this.authentication.hashCode());
        result = (result * PRIME) + (this.cveReference == null ? 43 : this.cveReference.hashCode());
        result = (result * PRIME) + (this.cveDetails == null ? 43 : this.cveDetails.hashCode());
        result = (result * PRIME) + (this.severity == null ? 43 : this.severity.hashCode());
        result = (result * PRIME) + (this.state == null ? 43 : this.state.hashCode());
        result = (result * PRIME) + (this.name == null ? 43 : this.name.hashCode());
        result =
                (result * PRIME)
                        + (this.timeLastDetected == null ? 43 : this.timeLastDetected.hashCode());
        result =
                (result * PRIME)
                        + (this.timeFirstDetected == null ? 43 : this.timeFirstDetected.hashCode());
        result = (result * PRIME) + (this.hostCount == null ? 43 : this.hostCount.hashCode());
        result =
                (result * PRIME)
                        + (this.vulnerabilityType == null ? 43 : this.vulnerabilityType.hashCode());
        result =
                (result * PRIME)
                        + (this.lifecycleState == null ? 43 : this.lifecycleState.hashCode());
        result =
                (result * PRIME)
                        + (this.__explicitlySet__ == null ? 43 : this.__explicitlySet__.hashCode());
        return result;
    }

    @com.fasterxml.jackson.annotation.JsonIgnore
    private final java.util.Set<String> __explicitlySet__ = new java.util.HashSet<String>();

    public java.util.Set<String> get__explicitlySet__() {
        return this.__explicitlySet__;
    }
}
