/**
 * Copyright (c) 2016, 2022, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */
package com.oracle.bmc.vulnerabilityscanning.model;

/**
 * Information on a container image impacted by a vulnerability
 * <br/>
 * Note: Objects should always be created or deserialized using the {@link Builder}. This model distinguishes fields
 * that are {@code null} because they are unset from fields that are explicitly set to {@code null}. This is done in
 * the setter methods of the {@link Builder}, which maintain a set of all explicitly set fields called
 * {@link #__explicitlySet__}. The {@link #hashCode()} and {@link #equals(Object)} methods are implemented to take
 * {@link #__explicitlySet__} into account. The constructor, on the other hand, does not set {@link #__explicitlySet__}
 * (since the constructor cannot distinguish explicit {@code null} from unset {@code null}).
 **/
@javax.annotation.Generated(value = "OracleSDKGenerator", comments = "API Version: 20210215")
@com.fasterxml.jackson.databind.annotation.JsonDeserialize(
    builder = VulnerabilityImpactedContainerSummary.Builder.class
)
@com.fasterxml.jackson.annotation.JsonFilter(com.oracle.bmc.http.internal.ExplicitlySetFilter.NAME)
public final class VulnerabilityImpactedContainerSummary {
    @Deprecated
    @java.beans.ConstructorProperties({
        "containerScanTargetId",
        "repository",
        "registry",
        "image",
        "lastContainerScanId",
        "timeScanCompleted"
    })
    public VulnerabilityImpactedContainerSummary(
            String containerScanTargetId,
            String repository,
            String registry,
            String image,
            String lastContainerScanId,
            java.util.Date timeScanCompleted) {
        super();
        this.containerScanTargetId = containerScanTargetId;
        this.repository = repository;
        this.registry = registry;
        this.image = image;
        this.lastContainerScanId = lastContainerScanId;
        this.timeScanCompleted = timeScanCompleted;
    }

    @com.fasterxml.jackson.databind.annotation.JsonPOJOBuilder(withPrefix = "")
    public static class Builder {
        @com.fasterxml.jackson.annotation.JsonProperty("containerScanTargetId")
        private String containerScanTargetId;

        public Builder containerScanTargetId(String containerScanTargetId) {
            this.containerScanTargetId = containerScanTargetId;
            this.__explicitlySet__.add("containerScanTargetId");
            return this;
        }

        @com.fasterxml.jackson.annotation.JsonProperty("repository")
        private String repository;

        public Builder repository(String repository) {
            this.repository = repository;
            this.__explicitlySet__.add("repository");
            return this;
        }

        @com.fasterxml.jackson.annotation.JsonProperty("registry")
        private String registry;

        public Builder registry(String registry) {
            this.registry = registry;
            this.__explicitlySet__.add("registry");
            return this;
        }

        @com.fasterxml.jackson.annotation.JsonProperty("image")
        private String image;

        public Builder image(String image) {
            this.image = image;
            this.__explicitlySet__.add("image");
            return this;
        }

        @com.fasterxml.jackson.annotation.JsonProperty("lastContainerScanId")
        private String lastContainerScanId;

        public Builder lastContainerScanId(String lastContainerScanId) {
            this.lastContainerScanId = lastContainerScanId;
            this.__explicitlySet__.add("lastContainerScanId");
            return this;
        }

        @com.fasterxml.jackson.annotation.JsonProperty("timeScanCompleted")
        private java.util.Date timeScanCompleted;

        public Builder timeScanCompleted(java.util.Date timeScanCompleted) {
            this.timeScanCompleted = timeScanCompleted;
            this.__explicitlySet__.add("timeScanCompleted");
            return this;
        }

        @com.fasterxml.jackson.annotation.JsonIgnore
        private final java.util.Set<String> __explicitlySet__ = new java.util.HashSet<String>();

        public VulnerabilityImpactedContainerSummary build() {
            VulnerabilityImpactedContainerSummary __instance__ =
                    new VulnerabilityImpactedContainerSummary(
                            containerScanTargetId,
                            repository,
                            registry,
                            image,
                            lastContainerScanId,
                            timeScanCompleted);
            __instance__.__explicitlySet__.addAll(__explicitlySet__);
            return __instance__;
        }

        @com.fasterxml.jackson.annotation.JsonIgnore
        public Builder copy(VulnerabilityImpactedContainerSummary o) {
            Builder copiedBuilder =
                    containerScanTargetId(o.getContainerScanTargetId())
                            .repository(o.getRepository())
                            .registry(o.getRegistry())
                            .image(o.getImage())
                            .lastContainerScanId(o.getLastContainerScanId())
                            .timeScanCompleted(o.getTimeScanCompleted());

            copiedBuilder.__explicitlySet__.retainAll(o.__explicitlySet__);
            return copiedBuilder;
        }
    }

    /**
     * Create a new builder.
     */
    public static Builder builder() {
        return new Builder();
    }

    public Builder toBuilder() {
        return new Builder().copy(this);
    }

    /**
     * The scan target id of the repository scan result
     **/
    @com.fasterxml.jackson.annotation.JsonProperty("containerScanTargetId")
    private final String containerScanTargetId;

    public String getContainerScanTargetId() {
        return containerScanTargetId;
    }

    /**
     * The repository id of the container image.
     **/
    @com.fasterxml.jackson.annotation.JsonProperty("repository")
    private final String repository;

    public String getRepository() {
        return repository;
    }

    /**
     * The registry key of the container image.
     **/
    @com.fasterxml.jackson.annotation.JsonProperty("registry")
    private final String registry;

    public String getRegistry() {
        return registry;
    }

    /**
     * The name of the container image.
     **/
    @com.fasterxml.jackson.annotation.JsonProperty("image")
    private final String image;

    public String getImage() {
        return image;
    }

    /**
     * The ID of the last container image scan result Id
     **/
    @com.fasterxml.jackson.annotation.JsonProperty("lastContainerScanId")
    private final String lastContainerScanId;

    public String getLastContainerScanId() {
        return lastContainerScanId;
    }

    /**
     * Date and time the scan was completed, as described in [RFC 3339](https://tools.ietf.org/rfc/rfc3339)
     **/
    @com.fasterxml.jackson.annotation.JsonProperty("timeScanCompleted")
    private final java.util.Date timeScanCompleted;

    public java.util.Date getTimeScanCompleted() {
        return timeScanCompleted;
    }

    @Override
    public String toString() {
        java.lang.StringBuilder sb = new java.lang.StringBuilder();
        sb.append("VulnerabilityImpactedContainerSummary(");
        sb.append("containerScanTargetId=").append(String.valueOf(this.containerScanTargetId));
        sb.append(", repository=").append(String.valueOf(this.repository));
        sb.append(", registry=").append(String.valueOf(this.registry));
        sb.append(", image=").append(String.valueOf(this.image));
        sb.append(", lastContainerScanId=").append(String.valueOf(this.lastContainerScanId));
        sb.append(", timeScanCompleted=").append(String.valueOf(this.timeScanCompleted));
        sb.append("__explicitlySet__=").append(String.valueOf(this.__explicitlySet__));
        sb.append(")");
        return sb.toString();
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (!(o instanceof VulnerabilityImpactedContainerSummary)) {
            return false;
        }

        VulnerabilityImpactedContainerSummary other = (VulnerabilityImpactedContainerSummary) o;
        return java.util.Objects.equals(this.containerScanTargetId, other.containerScanTargetId)
                && java.util.Objects.equals(this.repository, other.repository)
                && java.util.Objects.equals(this.registry, other.registry)
                && java.util.Objects.equals(this.image, other.image)
                && java.util.Objects.equals(this.lastContainerScanId, other.lastContainerScanId)
                && java.util.Objects.equals(this.timeScanCompleted, other.timeScanCompleted)
                && java.util.Objects.equals(this.__explicitlySet__, other.__explicitlySet__);
    }

    @Override
    public int hashCode() {
        final int PRIME = 59;
        int result = 1;
        result =
                (result * PRIME)
                        + (this.containerScanTargetId == null
                                ? 43
                                : this.containerScanTargetId.hashCode());
        result = (result * PRIME) + (this.repository == null ? 43 : this.repository.hashCode());
        result = (result * PRIME) + (this.registry == null ? 43 : this.registry.hashCode());
        result = (result * PRIME) + (this.image == null ? 43 : this.image.hashCode());
        result =
                (result * PRIME)
                        + (this.lastContainerScanId == null
                                ? 43
                                : this.lastContainerScanId.hashCode());
        result =
                (result * PRIME)
                        + (this.timeScanCompleted == null ? 43 : this.timeScanCompleted.hashCode());
        result =
                (result * PRIME)
                        + (this.__explicitlySet__ == null ? 43 : this.__explicitlySet__.hashCode());
        return result;
    }

    @com.fasterxml.jackson.annotation.JsonIgnore
    private final java.util.Set<String> __explicitlySet__ = new java.util.HashSet<String>();

    public java.util.Set<String> get__explicitlySet__() {
        return this.__explicitlySet__;
    }
}
